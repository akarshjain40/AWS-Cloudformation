---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creating SQS Standard Queue
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Queue Configuration"
        Parameters:
          - QueueName
          - DelaySeconds
          - MessageRetentionPeriod
          - ReceiveMessageWaitTimeSeconds
          - VisibilityTimeout

      -
        Label:
          default: "CloudWatch Alarm"
        Parameters:
          - SNSTopic
          - AlarmEmail

      -
        Label:
          default: 'DeadLetter Queue'
        Parameters:
          - UsedeadletterQueue      
          
Parameters:
  QueueName:
    Description: Name of the Queue
    Type: String
  DelaySeconds:
    Description: The time in seconds that the delivery of all messages in the queue
      is delayed.
    ConstraintDescription: Specify an integer value of 0 to 900 (15 minutes).
    Type: Number
    MinValue: '0'
    MaxValue: '900'
    Default: '0'
  MessageRetentionPeriod:
    Description: The number of seconds that Amazon SQS retains a message.
    ConstraintDescription: Specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days).
    Type: Number
    MinValue: '60'
    MaxValue: '1209600'
    Default: '604800' 
  ReceiveMessageWaitTimeSeconds:
    Description: Specifies the duration, in seconds, that the ReceiveMessage action
      call waits until a message is in the queue in order to include it in the response,
      as opposed to returning an empty response if a message is not yet available.
      1 to 20
    Type: Number
    MinValue: '0'
    MaxValue: '20'
    Default: '20'
  VisibilityTimeout:
    Description: This should be longer than the time it would take to process and
      delete a message, this should not exceed 12 hours.
    Type: Number
    MinValue: '0'
    MaxValue: '43200'
    Default: '300'    
  UsedeadletterQueue:
    Description: A dead-letter queue is a queue that other (source) queues can target
      for messages that can't be processed (consumed) successfully. You can set aside
      and isolate these messages in the dead-letter queue to determine why their processing
      doesn't succeed.
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
  SNSTopic:
    Description: SNS Topic name to which notifications are sent
    Type: String
    Default: sqs-notification
  AlarmEmail: 
    Default: akarsh.n@goevive.com
    Description: Email address to notify of operational issues
    Type: String   
  VpcEndpoint:
    Description: VPC Endpoint for Amazon SQS
    Type: "String"
Conditions: 
  CreateDeadLetterQueue: !Equals [ !Ref UsedeadletterQueue, 'true']
Resources:
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      DelaySeconds: !Ref DelaySeconds
      MessageRetentionPeriod: !Ref MessageRetentionPeriod
      ReceiveMessageWaitTimeSeconds: !Ref ReceiveMessageWaitTimeSeconds
      KmsDataKeyReusePeriodSeconds: '86400'  
      KmsMasterKeyId: 'alias/aws/sqs'  
      RedrivePolicy:
        Fn::If:
        - CreateDeadLetterQueue
        - deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
          maxReceiveCount: 5
        - !Ref AWS::NoValue
      VisibilityTimeout: !Ref VisibilityTimeout
      Tags:
        - Key: Team
          Value: Tagging
  DeadLetterQueue:
    Condition: CreateDeadLetterQueue
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - '-'
          - - !Ref QueueName
            - DeadLetterQueue
      KmsDataKeyReusePeriodSeconds: '86400'  
      KmsMasterKeyId: 'alias/aws/sqs'    
  AlarmTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: !Ref AlarmEmail
          Protocol: email  
      TopicName: !Ref SNSTopic       
  QueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: !Ref SQSQueue
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: SQS:*
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SQSQueue.QueueName}
          - Sid: '2'
            Effect: Deny
            Principal: "*"
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
              - SQS:DeleteMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SQSQueue.QueueName}
            Condition:
              StringNotEquals:
                aws:sourceVpce: !Ref VpcEndpoint

      Queues:
        -  !GetAtt SQSQueue.QueueName      
  QueueDepthAlarm: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: SQSQueue_QueueDepth
      AlarmDescription: Alarm if queue depth increases to more than 10 messages
      Dimensions: 
        - 
          Name: QueueName
          Value: !GetAtt SQSQueue.QueueName
      EvaluationPeriods: '1' 
      MetricName: ApproximateNumberOfMessagesVisible  
      Namespace: AWS/SQS 
      Period: '300'
      Statistic: Sum
      Threshold: '10'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: 
        - !Ref AlarmTopic
      InsufficientDataActions: 
        - !Ref AlarmTopic
  SQSQueueAgeOfOldestMessage:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: SQSQueue_AgeOfOldestMessage
      AlarmDescription: Alarms if the SQS Queue has messages in it for too long
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SQSQueue.QueueName
      EvaluationPeriods: 3
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 30
      ComparisonOperator: GreaterThanThreshold
      Unit: Seconds
      AlarmActions: 
        - !Ref AlarmTopic
      OKActions: 
        - !Ref AlarmTopic

  DeadLetterQueueApproximateNumberOfMessagesVisible:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateDeadLetterQueue
    Properties:
      AlarmName: DeadLetterQueue_ApproximateNumberOfMessagesVisible
      AlarmDescription: Alarms if the Dead Letter Queue has too many messages
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      EvaluationPeriods: 3
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions: 
        - !Ref AlarmTopic
      OKActions: 
        - !Ref AlarmTopic           

Outputs:
  QueueURL:
    Description: URL of newly created SQS Queue
    Value: !Ref SQSQueue
    Export:
      Name: !Sub '${AWS::StackName}-QueueURL'
  QueueARN:
    Description: ARN of newly created SQS Queue
    Value: !GetAtt SQSQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-QueueARN'
  QueueName:
    Description: Name newly created SQS Queue
    Value: !GetAtt SQSQueue.QueueName
  DeadLetterQueueURL:
    Condition: CreateDeadLetterQueue
    Description: URL of the dead letter queue
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueURL'
  DeadLetterQueueARN:
    Condition: CreateDeadLetterQueue
    Description: ARN of the dead letter queue
    Value: !GetAtt DeadLetterQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueARN'
  DeadLetterQueueName:
    Condition: CreateDeadLetterQueue
    Description: Name of the dead letter queue
    Value: !GetAtt DeadLetterQueue.QueueName